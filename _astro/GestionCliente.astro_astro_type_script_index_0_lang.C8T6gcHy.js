let u=[];async function m(){try{const e=await fetch("http://localhost:5183/api/Clientes");e.ok?(u=await e.json(),p(u)):console.error("Error cargando clientes:",e.statusText)}catch(e){console.error("Error:",e)}}function p(e){const r=document.getElementById("clienteTable");r&&(r.innerHTML=e.map(t=>`
      <tr class="border-b bg-[#e9eef6] hover:bg-gray-50">
        <td class="w-4 p-4">
          <input type="checkbox" class="form-checkbox clienteCheckbox" data-id="${t.id}" />
        </td>
        <td class="px-6 py-4 text-black">${t.id}</td>
        <td class="px-6 py-4 text-black font-semibold">${t.nombre}</td>
        <td class="px-6 py-4 text-black">${t.telefono}</td>
        <td class="px-6 py-4 text-black">${t.direccion}</td>
        <td class="px-6 py-4">
          <button class="text-blue-600 hover:text-blue-900 mr-3 editar-btn" data-id="${t.id}">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
          </button>
          <button class="text-red-600 hover:text-red-900 eliminar-btn" data-id="${t.id}">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          </button>
        </td>
      </tr>
    `).join(""),document.querySelectorAll(".editar-btn").forEach(t=>{t.addEventListener("click",o=>{const n=o.currentTarget.dataset.id;n&&E(parseInt(n))})}),document.querySelectorAll(".eliminar-btn").forEach(t=>{t.addEventListener("click",o=>{const n=o.currentTarget.dataset.id;n&&h(parseInt(n))})}))}function b(){const e=document.getElementById("inputSearch");e&&e.addEventListener("input",r=>{const o=r.target.value.toLowerCase(),i=u.filter(n=>n.nombre.toLowerCase().includes(o)||n.telefono.toLowerCase().includes(o)||n.direccion.toLowerCase().includes(o)||n.id.toString().includes(o));p(i)})}function E(e){const r=u.find(s=>s.id===e);if(!r)return;const t=document.getElementById("editClienteId"),o=document.getElementById("editClienteNombre"),i=document.getElementById("editClienteTelefono"),n=document.getElementById("editClienteDireccion"),d=document.getElementById("modalEditar");t&&o&&i&&n&&d&&(t.value=r.id.toString(),o.value=r.nombre,i.value=r.telefono,n.value=r.direccion,d.classList.remove("hidden"))}function h(e){confirm("¿Estás seguro de que deseas eliminar este cliente?")&&y(e)}async function y(e){try{(await fetch(`http://localhost:5183/api/Clientes/${e}`,{method:"DELETE"})).ok?(alert("Cliente eliminado correctamente"),await m()):alert("Error al eliminar el cliente")}catch(r){console.error("Error:",r),alert("Error al eliminar el cliente")}}document.addEventListener("DOMContentLoaded",()=>{m(),b();const e=document.getElementById("modalAgregar"),r=document.getElementById("agregarCliente"),t=document.getElementById("cancelarModal"),o=document.getElementById("cancelarModalEditar");r&&e&&r.addEventListener("click",()=>{e.classList.remove("hidden")}),t&&e&&t.addEventListener("click",()=>{e.classList.add("hidden")});const i=document.getElementById("modalEditar");o&&i&&o.addEventListener("click",()=>{i.classList.add("hidden")}),window.addEventListener("click",a=>{a.target===e&&a.target.classList.add("hidden"),a.target===i&&a.target.classList.add("hidden")});const n=document.getElementById("formAgregarCliente");n&&n.addEventListener("submit",async a=>{a.preventDefault();const c=new FormData(n);try{(await fetch("http://localhost:5183/api/Clientes",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:parseInt(c.get("id")),nombre:c.get("nombre"),telefono:c.get("telefono"),direccion:c.get("direccion")})})).ok?(alert("Cliente agregado correctamente"),n.reset(),e&&e.classList.add("hidden"),await m()):alert("Error al agregar el cliente")}catch(l){console.error("Error:",l),alert("Error al agregar el cliente")}});const d=document.getElementById("formEditarCliente");d&&d.addEventListener("submit",async a=>{a.preventDefault();const c=new FormData(d),l=c.get("id");try{(await fetch(`http://localhost:5183/api/Clientes/${l}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:parseInt(l),nombre:c.get("nombre"),telefono:c.get("telefono"),direccion:c.get("direccion")})})).ok?(alert("Cliente actualizado correctamente"),i&&i.classList.add("hidden"),await m()):alert("Error al actualizar el cliente")}catch(f){console.error("Error:",f),alert("Error al actualizar el cliente")}});const s=document.getElementById("editarCliente"),g=document.getElementById("eliminarCliente");s&&s.addEventListener("click",()=>{const a=document.querySelector(".clienteCheckbox:checked");a&&a.dataset.id?E(parseInt(a.dataset.id)):alert("Seleccione un cliente para editar")}),g&&g.addEventListener("click",()=>{const a=document.querySelector(".clienteCheckbox:checked");a&&a.dataset.id?h(parseInt(a.dataset.id)):alert("Seleccione un cliente para eliminar")})});
