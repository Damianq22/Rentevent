---
import { Icon } from "astro-icon/components";

const res = await fetch("http://localhost:5183/api/Usuario");
const usuarios = await res.json();
---

<div class="shadow-md sm:rounded-lg bg-[#e9eef6] p-4 pb-2 w-full h-full">
  <div class="flex items-center justify-between">
    <!-- Contenedor para botones e input -->
    <div class="flex items-center justify-between w-full">
      <!-- Botones -->
      <div class="flex items-center space-x-2">
        <button
          id="agregarUsuario"
          class="flex items-center text-black hover:bg-green-300 p-1 rounded-md"
        >
          <Icon
            name="add"
            class="w-6 h-6 mr-2 flex items-center text-[#29b73a96]"
          />
          Agregar
        </button>
      </div>
    </div>
  </div>

  <!-- aqui Inicia la Tabla con la Indectacion de los Usuarios -->
  <table
    class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400 mt-2"
  >
    <thead
      class="text-xs text-pink-800 uppercase bg-gray-50 dark:bg-gray-900 dark:text-pink-500"
    >
      <tr>
        <th scope="col" class="p-4">
          <Icon name="square" />
        </th>
        <th scope="col" class="px-9 py-3">Id</th>
        <th scope="col" class="px-6 py-3">Nombre</th>
        <th scope="col" class="px-6 py-3">Usuario</th>
      </tr>
    </thead>

    <tbody id="userTable">
      {
        usuarios.length > 0 ? (
          usuarios.map((usuario) => (
            <tr class=" border-b bg-[#e9eef6] dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-400">
              <td class="w-4 p-4">
                <input
                  type="checkbox"
                  class="form-checkbox userCheckbox"
                  data-id={usuario.id}
                />
              </td>
              <td class="px-9 py-4 text-black">{usuario.id}</td>
              <td class="px-6 py-4 text-black">{usuario.nombre}</td>
              <td class="px-6 py-4 text-black">{usuario.usuario}</td>
            </tr>
          ))
        ) : (
          <tr>
            <td colspan="4" class="px-6 py-4 text-center">
              No users found.
            </td>
          </tr>
        )
      }
    </tbody>
  </table>
</div>

<!-- Modal para agregar usuario -->
<div
  id="modalAgregar"
  class="fixed inset-0 z-50 flex items-center justify-center bg-gray-900 bg-opacity-30 backdrop-blur-sm hidden transition-opacity duration-300"
>
  <div
    class="bg-gradient-to-br from-white to-gray-50 p-6 rounded-xl shadow-2xl w-full max-w-2xl border border-gray-200 transform transition-all duration-300 scale-95 hover:scale-100"
  >
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-2xl font-bold text-gray-800">Agregar Nuevo Usuario</h3>
      <button id="cancelarModal" class="text-gray-500 hover:text-gray-700">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <form id="formAgregarUsuario" class="space-y-4">
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <!-- Nombre -->
        <div class="space-y-1">
          <label class="block text-sm font-medium text-gray-700">Nombre</label>
          <input
            type="text"
            name="nombre"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
            placeholder="Nombre completo"
            required
          />
        </div>

        <!-- Usuario -->
        <div class="space-y-1">
          <label class="block text-sm font-medium text-gray-700">Usuario</label>
          <input
            type="text"
            name="usuario"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
            placeholder="Nombre de usuario"
            required
            autocomplete="username"
          />
        </div>

        <!-- Contraseña -->
        <div class="space-y-1">
          <label class="block text-sm font-medium text-gray-700"
            >Contraseña</label
          >
          <div class="relative">
            <input
              type="password"
              name="contraseña"
              id="passwordField"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
              placeholder="••••••••"
              required
              autocomplete="new-password"
            />
            <button
              type="button"
              id="togglePassword"
              class="absolute right-3 top-2.5 text-gray-500 hover:text-gray-700"
            >
              <svg
                id="eyeIcon"
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"></path>
                <path
                  fill-rule="evenodd"
                  d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
                  clip-rule="evenodd"></path>
              </svg>
            </button>
          </div>
        </div>

        <!-- Confirmar Contraseña -->
        <div class="space-y-1">
          <label class="block text-sm font-medium text-gray-700"
            >Confirmar Contraseña</label
          >
          <input
            type="password"
            name="confirmar_contraseña"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
            placeholder="••••••••"
            required
            autocomplete="new-password"
          />
        </div>
      </div>

      <!-- Botones -->
      <div class="flex justify-end space-x-3 pt-4">
        <button
          type="button"
          id="closeModalBtn"
          class="px-5 py-2.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
        >
          Cancelar
        </button>
        <button
          type="submit"
          class="px-5 py-2.5 text-sm font-medium text-white bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 shadow-sm transition-all"
        >
          <span id="submitText">Guardar Usuario</span>
          <span id="loadingSpinner" class="hidden ml-2">
            <svg
              class="animate-spin h-5 w-5 text-white"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                class="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                stroke-width="4"></circle>
              <path
                class="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
          </span>
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  // Manejo del modal
  document.addEventListener("DOMContentLoaded", function () {
    const passwordField = document.getElementById(
      "passwordField"
    ) as HTMLInputElement;
    const eyeIcon = document.getElementById("eyeIcon");
    const toggleBtn = document.getElementById("togglePassword");
    if (!toggleBtn || !passwordField || !eyeIcon) return;

    toggleBtn.addEventListener("click", () => {
      const isHidden = passwordField.type === "password";
      passwordField.type = isHidden ? "text" : "password";

      eyeIcon.innerHTML = isHidden
        ? `
        <path d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
      `
        : `
        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
        <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
      `;
    });

    const modal = document.getElementById("modalAgregar");
    const openBtn = document.getElementById("agregarUsuario");
    const closeBtn = document.getElementById("cancelarModal");
    const closeModalBtn = document.getElementById("closeModalBtn");
    const form = document.getElementById(
      "formAgregarUsuario"
    ) as HTMLFormElement;

    // Abrir modal
    openBtn?.addEventListener("click", () => {
      modal.classList.remove("hidden");
      setTimeout(() => {
        modal.style.opacity = "1";
        modal.querySelector("div").classList.remove("scale-95");
      }, 10);
    });

    // Cerrar modal
    function closeModal() {
      modal.style.opacity = "0";
      modal.querySelector("div").classList.add("scale-95");
      setTimeout(() => modal.classList.add("hidden"), 300);
    }

    closeModalBtn.addEventListener("click", () => {
      modal.classList.add("hidden");
    });

    closeBtn?.addEventListener("click", closeModal);

    // Cerrar al hacer clic fuera del modal
    modal?.addEventListener("click", (e) => {
      if (e.target === modal) closeModal();
    });

    // Enviar formulario
    form?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const submitBtn = form.querySelector(
        'button[type="submit"]'
      ) as HTMLButtonElement;
      const submitText = submitBtn.querySelector("#submitText");
      const spinner = submitBtn.querySelector("#loadingSpinner");

      // Mostrar spinner
      submitText.classList.add("hidden");
      spinner.classList.remove("hidden");
      submitBtn.disabled = true;

      try {
        const formData = new FormData(form);

        // Validar contraseñas
        if (
          formData.get("contraseña") !== formData.get("confirmar_contraseña")
        ) {
          throw new Error("Las contraseñas no coinciden");
        }

        const usuarioData = {
          nombre: formData.get("nombre"),
          usuario: formData.get("usuario"),
          contraseña: formData.get("contraseña"),
        };

        // Enviar a la API
        const response = await fetch("https://localhost:7280/api/Usuario", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(usuarioData),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Error al guardar el usuario");
        }

        // Éxito - recargar datos o cerrar modal
        alert("Usuario guardado correctamente");
        window.location.reload();

        closeModal();
        form.reset();
      } catch (error) {
        alert(error.message);
        console.error("Error:", error);
      } finally {
        // Restaurar botón
        submitText.classList.remove("hidden");
        spinner.classList.add("hidden");
        submitBtn.disabled = false;
      }
    });
  });
</script>
