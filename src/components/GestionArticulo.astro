---
import { Icon } from "astro-icon/components";

// Configuración de fetch para desarrollo local
interface CustomFetchOptions extends RequestInit {
  agent?: any;
}

const fetchOptions: CustomFetchOptions = {
  credentials: "include",
  mode: "cors",
  // Solo para desarrollo - NO usar en producción
  agent: new (await import("https")).Agent({ rejectUnauthorized: false }),
};

// Tipos para los datos
interface Articulo {
  id: number;
  descripcion: string;
  precioAlquiler: number;
  precioProveedor: number;
  cantidad: number;
  disponible: number;
  reparacion: number;
  proveedorId: number;
  categoriaId: number;
}

interface Proveedor {
  id: number;
  telefono: string;
  nombre: string;
}

interface Categoria {
  id: number;
  descripcion: string;
}

// Obtener datos iniciales
let articulos: Articulo[] = [];
let proveedores: Proveedor[] = [];
let categorias: Categoria[] = [];
let error: string | null = null;

try {
  // Obtener artículos
  const resArticulos = await fetch(
    "http://localhost:5183/api/Articulos",
    fetchOptions
  );
  articulos = (await resArticulos.json()) as Articulo[];

  // Obtener proveedores
  const resProveedores = await fetch(
    "http://localhost:5183/api/Proveedores",
    fetchOptions
  );
  proveedores = (await resProveedores.json()) as Proveedor[];

  // Obtener categorías
  const resCategorias = await fetch(
    "http://localhost:5183/api/Categorias",
    fetchOptions
  );
  categorias = (await resCategorias.json()) as Categoria[];
} catch (err) {
  error = (err as Error).message;
  console.error("Error fetching data:", err);
}

// Función para obtener nombre de proveedor
const getNombreProveedor = (id: number): string => {
  const proveedor = proveedores.find((p) => p.id === id);
  return proveedor ? proveedor.nombre : "Desconocido";
};

// Función para obtener descripción de categoría
const getDescripcionCategoria = (id: number): string => {
  const categoria = categorias.find((c) => c.id === id);
  return categoria ? categoria.descripcion : "Sin categoría";
};
---

<div class="shadow-md sm:rounded-lg bg-[#e9eef6] p-4 pb-2 w-full h-full">
  <!-- Encabezado con botón de agregar -->
  <div class="flex items-center justify-between mb-4">
    <h2 class="text-xl font-bold text-gray-800">Gestión de Artículos</h2>
    <button
      id="agregarArticulo"
      class="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
    >
      <Icon name="add" class="w-5 h-5 mr-2" />
      Agregar Artículo
    </button>
  </div>

  <!-- Mensaje de error -->
  {
    error && (
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
        Error al cargar datos: {error}
      </div>
    )
  }

  <!-- Tabla de artículos -->
  <div class="overflow-x-auto">
    <table class="w-full text-sm text-left text-gray-700">
      <thead class="text-xs text-white uppercase bg-blue-600">
        <tr>
          <th scope="col" class="px-6 py-3">ID</th>
          <th scope="col" class="px-6 py-3">Descripción</th>
          <th scope="col" class="px-6 py-3">Precio Alquiler</th>
          <th scope="col" class="px-6 py-3">Disponible</th>
          <th scope="col" class="px-6 py-3">Proveedor</th>
          <th scope="col" class="px-6 py-3">Categoría</th>
          <th scope="col" class="px-6 py-3">Acciones</th>
        </tr>
      </thead>
      <tbody>
        {
          articulos.length > 0 ? (
            articulos.map((articulo) => (
              <tr class="bg-white border-b hover:bg-gray-50">
                <td class="px-6 py-4">{articulo.id}</td>
                <td class="px-6 py-4 font-medium text-gray-900">
                  {articulo.descripcion}
                </td>
                <td class="px-6 py-4">${articulo.precioAlquiler.toFixed(2)}</td>
                <td class="px-6 py-4">
                  <span
                    class={`px-2 py-1 rounded-full text-xs ${articulo.disponible > 0 ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`}
                  >
                    {articulo.disponible} disponibles
                  </span>
                </td>
                <td class="px-6 py-4">
                  {getNombreProveedor(articulo.proveedorId)}
                </td>
                <td class="px-6 py-4">
                  {getDescripcionCategoria(articulo.categoriaId)}
                </td>
                <td class="px-6 py-4 flex space-x-2">
                  <button class="p-1 text-blue-600 hover:text-blue-800">
                    <Icon name="actualizar" class="w-5 h-5" />
                  </button>
                  <button class="p-1 text-red-600 hover:text-red-800">
                    <Icon name="eliminar" class="w-5 h-5" />
                  </button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colspan="7" class="px-6 py-4 text-center text-gray-500">
                No se encontraron artículos
              </td>
            </tr>
          )
        }
      </tbody>
    </table>
  </div>

  <!-- Modal para agregar artículo -->
  <div
    id="modalAgregarArticulo"
    class="fixed inset-0 z-50 flex items-center justify-center bg-gray-900 bg-opacity-30 backdrop-blur-sm hidden transition-opacity duration-300"
  >
    <div
      class="bg-white p-6 rounded-xl shadow-2xl w-full max-w-2xl border border-gray-200"
    >
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-2xl font-bold text-gray-800">Agregar Nuevo Artículo</h3>
        <button
          id="cancelarModalArticulo"
          class="text-gray-500 hover:text-gray-700"
        >
          <Icon name="salir" class="w-6 h-6" />
        </button>
      </div>

      <form id="formAgregarArticulo" class="space-y-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- Descripción -->
          <div class="col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-1"
              >Descripción</label
            >
            <input
              type="text"
              name="descripcion"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <!-- Precios -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1"
              >Precio Alquiler</label
            >
            <input
              type="number"
              name="precioAlquiler"
              step="0.01"
              min="0"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1"
              >Precio Proveedor</label
            >
            <input
              type="number"
              name="precioProveedor"
              step="0.01"
              min="0"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <!-- Cantidades -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1"
              >Cantidad Total</label
            >
            <input
              type="number"
              name="cantidad"
              min="0"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1"
              >En Reparación</label
            >
            <input
              type="number"
              name="reparacion"
              min="0"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <!-- Selectores -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1"
              >Proveedor</label
            >
            <select
              name="proveedorId"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            >
              <option value="">Seleccione un proveedor</option>
              {
                proveedores.map((proveedor) => (
                  <option value={proveedor.id}>{proveedor.nombre}</option>
                ))
              }
            </select>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1"
              >Categoría</label
            >
            <select
              name="categoriaId"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            >
              <option value="">Seleccione una categoría</option>
              {
                categorias.map((categoria) => (
                  <option value={categoria.id}>{categoria.descripcion}</option>
                ))
              }
            </select>
          </div>
        </div>

        <!-- Botones -->
        <div class="flex justify-end space-x-3 pt-4">
          <button
            type="button"
            id="cancelarModalArticulo"
            class="px-5 py-2.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
          >
            Cancelar
          </button>
          <button
            type="submit"
            class="px-5 py-2.5 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700"
          >
            Guardar Artículo
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  interface ArticuloFormData {
    descripcion: string;
    precioAlquiler: string;
    precioProveedor: string;
    cantidad: string;
    reparacion: string;
    proveedorId: string;
    categoriaId: string;
  }

  // Manejo del modal
  document.addEventListener("DOMContentLoaded", function () {
    const modal = document.getElementById("modalAgregarArticulo");
    const openBtn = document.getElementById("agregarArticulo");
    const closeBtn = document.getElementById("cancelarModalArticulo");
    const form = document.getElementById(
      "formAgregarArticulo"
    ) as HTMLFormElement;

    // Abrir modal
    openBtn?.addEventListener("click", () => {
      modal?.classList.remove("hidden");
    });

    // Cerrar modal
    function closeModal() {
      modal?.classList.add("hidden");
    }

    closeBtn?.addEventListener("click", closeModal);

    // Cerrar al hacer clic fuera del modal
    modal?.addEventListener("click", (e) => {
      if (e.target === modal) closeModal();
    });

    // Enviar formulario
    form?.addEventListener("submit", async (e) => {
      e.preventDefault();

      if (!form) return;

      const submitBtn = form.querySelector(
        'button[type="submit"]'
      ) as HTMLButtonElement;
      submitBtn.disabled = true;
      submitBtn.innerHTML = "Guardando...";

      try {
        const formData = new FormData(form);

        // Convertir FormData a objeto tipado
        const formValues = Object.fromEntries(
          formData.entries()
        ) as unknown as ArticuloFormData;

        const articuloData = {
          descripcion: formValues.descripcion,
          precioAlquiler: parseFloat(formValues.precioAlquiler),
          precioProveedor: parseFloat(formValues.precioProveedor),
          cantidad: parseInt(formValues.cantidad),
          disponible:
            parseInt(formValues.cantidad) -
            (parseInt(formValues.reparacion) || 0),
          reparacion: parseInt(formValues.reparacion) || 0,
          proveedorId: parseInt(formValues.proveedorId),
          categoriaId: parseInt(formValues.categoriaId),
        };

        console.log("articuloData", articuloData);

        const response = await fetch(
          "https://localhost:7280/api/ArticulosControllerDto",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(articuloData),
          }
        );

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Error al guardar el artículo");
        }

        // Éxito - recargar página para ver cambios
        alert("Artículo guardado correctamente");
        window.location.reload();
      } catch (error) {
        alert((error as Error).message);
        console.error("Error:", error);
      } finally {
        if (submitBtn) {
          submitBtn.disabled = false;
          submitBtn.innerHTML = "Guardar Artículo";
        }
      }
    });
  });
</script>
