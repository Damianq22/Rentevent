---
import { Icon } from "astro-icon/components";

// Lógica para obtener alquileres con detalles
const response = await fetch(
  "http://localhost:5183/api/AlquileresControllerDTO/con-detalles"
);
let alquileres = [];

if (response.ok) {
  alquileres = await response.json();
} else {
  console.error("Error obteniendo alquileres:", response.statusText);
}

// Estados posibles
const estados = ["Todos", "Alquilado", "Pendiente", "Devuelto"];
---

<div class="shadow-md sm:rounded-lg bg-[#e9eef6] p-4 pb-2 w-full h-full">
  <div class="flex items-center justify-between mb-4">
    <!-- Filtros -->
    <div class="flex flex-wrap gap-4">
      <!-- Filtro por estado -->
      <div class="flex items-center space-x-2">
        <label class="text-sm font-medium text-gray-700">Estado:</label>
        <select
          id="filtroEstado"
          class="p-2 border border-gray-300 rounded-md text-black focus:ring-blue-500 focus:border-blue-500"
        >
          {estados.map((estado) => <option value={estado}>{estado}</option>)}
        </select>
      </div>

      <!-- Filtro por fecha entrega -->
      <div class="flex items-center space-x-2">
        <label class="text-sm font-medium text-gray-700">Desde:</label>
        <input
          type="date"
          id="filtroFechaDesde"
          class="p-2 border border-gray-300 rounded-md text-black focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      <!-- Filtro por fecha devolución -->
      <div class="flex items-center space-x-2">
        <label class="text-sm font-medium text-gray-700">Hasta:</label>
        <input
          type="date"
          id="filtroFechaHasta"
          class="p-2 border border-gray-300 rounded-md text-black focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      <!-- Botón aplicar filtros -->
    </div>

    <!-- Buscador -->
    <div class="relative ml-auto">
      <div
        class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none"
      >
        <svg
          class="w-4 h-4 text-gray-500 dark:text-gray-400"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 20 20"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"></path>
        </svg>
      </div>
      <input
        type="text"
        id="inputSearch"
        class="block p-2 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg w-80 bg-[#e9eef6] focus:ring-blue-500 focus:border-blue-500 dark:border-gray-600 dark:placeholder-gray-400 dark:text-black dark:focus:ring-blue-500 dark:focus:border-blue-500"
        placeholder="Buscar Alquiler"
      />
    </div>
  </div>

  <!-- Tabla de alquileres -->
  <table
    class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400"
  >
    <thead
      class="text-xs text-pink-800 uppercase bg-gray-50 dark:bg-gray-900 dark:text-pink-500"
    >
      <tr>
        <th scope="col" class="px-6 py-3">ID</th>
        <th scope="col" class="px-6 py-3">Cliente</th>
        <th scope="col" class="px-6 py-3">Artículo</th>
        <th scope="col" class="px-6 py-3">Fechas</th>
        <th scope="col" class="px-6 py-3">Cantidad</th>
        <th scope="col" class="px-6 py-3">Total</th>
        <th scope="col" class="px-6 py-3">Estado</th>
      </tr>
    </thead>

    <tbody id="alquilerTable">
      {
        alquileres.length > 0 ? (
          alquileres.map((alquiler) => (
            <tr class="border-b bg-[#e9eef6] dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-400">
              <td class="px-6 py-4 text-black font-semibold">
                {alquiler.alquilerId}
              </td>
              <td class="px-6 py-4">
                <div class="text-black font-semibold">
                  {alquiler.clienteNombre}
                </div>
                <div class="text-gray-500">Tel: {alquiler.clienteTelefono}</div>
              </td>
              <td class="px-6 py-4">
                <div class="text-black font-semibold">
                  {alquiler.articuloDescripcion}
                </div>
                <div class="text-gray-500">
                  Proveedor: {alquiler.proveedorNombre}
                </div>
                <div class="text-gray-500">
                  Categoría: {alquiler.categoriaDescripcion}
                </div>
              </td>
              <td class="px-6 py-4">
                <div class="text-black">
                  Entrega:{" "}
                  {new Date(alquiler.fechaEntrega).toLocaleDateString()}
                </div>
                <div class="text-black">
                  Devolución:{" "}
                  {new Date(alquiler.fechaDevolucion).toLocaleDateString()}
                </div>
              </td>
              <td class="px-6 py-4 text-black">{alquiler.cantidad}</td>
              <td class="px-6 py-4 text-black">
                ${alquiler.totalPago.toLocaleString()}
              </td>
              <td class="px-6 py-4">
                <span
                  class={`px-2 py-1 rounded-full text-xs font-semibold ${
                    alquiler.estado === "Devuelto"
                      ? "bg-green-100 text-green-800"
                      : alquiler.estado === "Alquilado"
                        ? "bg-blue-100 text-blue-800"
                        : "bg-yellow-100 text-yellow-800"
                  }`}
                >
                  {alquiler.estado}
                </span>

                {alquiler.estado === "Pendiente" && (
                  <button
                    class="ml-2 px-2 py-1 bg-red-500 text-white text-xs hover:bg-red-600 abrir-modal rounded-4xl"
                    data-id={alquiler.alquilerId}
                    data-articulo-id={alquiler.articuloId}
                    data-max={alquiler.cantidad}
                  >
                    Reportar
                  </button>
                )}
              </td>
            </tr>
          ))
        ) : (
          <tr>
            <td colspan="8" class="px-6 py-4 text-center">
              No se encontraron alquileres
            </td>
          </tr>
        )
      }
    </tbody>
  </table>
</div>

<div
  id="modalMalEstado"
  class="fixed inset-0 flex items-center justify-center border backdrop-blur-sm hidden z-50"
>
  <div class="bg-white rounded-lg p-6 w-96 shadow-xl border border-gray-800">
    <h2 class="text-lg font-semibold text-gray-700 mb-4">
      Artículos en mal estado
    </h2>
    <form id="formReporte">
      <input type="hidden" id="modalAlquilerId" />
      <input type="hidden" id="modalArticuloId" />
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-1">
          Cantidad dañada (Máx: <span id="maxCantidad">0</span>):
        </label>
        <input
          type="number"
          id="modalCantidad"
          min="-1"
          class="w-full p-2 border border-gray-300 rounded-md"
          required
        />
        <p id="cantidadError" class="text-red-500 text-sm hidden mt-1"></p>
      </div>
      <div class="flex justify-end gap-2">
        <button
          type="button"
          id="btnCancelar"
          class="px-4 py-2 bg-gray-300 text-black rounded hover:bg-gray-400"
        >
          Cancelar
        </button>
        <button
          type="submit"
          class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Enviar
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  const inputSearch = document.getElementById(
    "inputSearch"
  ) as HTMLInputElement;
  const estadoSelect = document.getElementById(
    "filtroEstado"
  ) as HTMLInputElement;
  const fechaDesdeInput = document.getElementById(
    "filtroFechaDesde"
  ) as HTMLInputElement;
  const fechaHastaInput = document.getElementById(
    "filtroFechaHasta"
  ) as HTMLInputElement;
  const alquilerTable = document.getElementById("alquilerTable");

  function normalize(text) {
    return text
      .toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "");
  }

  function aplicarFiltros() {
    const texto = normalize(inputSearch.value.trim());
    const estado = estadoSelect.value;
    const fechaDesdeStr = fechaDesdeInput.value;
    const fechaHastaStr = fechaHastaInput.value;
    const rows = Array.from(alquilerTable.children) as HTMLElement[];

    rows.forEach((row) => {
      const cliente = normalize(row.children[1].textContent);
      const articulo = normalize(row.children[2].textContent);
      const estadoTexto = normalize(row.children[6].textContent);

      const fechaEntregaText = row.children[3].children[0]?.textContent
        ?.trim()
        .replace("Entrega:", "")
        .trim();

      let fechaEntrega = null;
      if (fechaEntregaText) {
        const [day, month, year] = fechaEntregaText.split("/");
        fechaEntrega = new Date(`${year}-${month}-${day}`);
      }

      let visible = true;

      if (texto && !cliente.includes(texto) && !articulo.includes(texto)) {
        visible = false;
      }

      if (estado !== "Todos" && !estadoTexto.includes(normalize(estado))) {
        visible = false;
      }

      if (fechaDesdeStr || fechaHastaStr) {
        const fechaDesde = fechaDesdeStr ? new Date(fechaDesdeStr) : null;
        const fechaHasta = fechaHastaStr ? new Date(fechaHastaStr) : null;

        if (fechaDesde && fechaEntrega && fechaEntrega < fechaDesde) {
          visible = false;
        }

        if (fechaHasta && fechaEntrega && fechaEntrega > fechaHasta) {
          visible = false;
        }
      }

      row.style.display = visible ? "" : "none";
    });
  }
  inputSearch.addEventListener("input", aplicarFiltros);
  estadoSelect.addEventListener("change", aplicarFiltros);
  fechaDesdeInput.addEventListener("change", aplicarFiltros);
  fechaHastaInput.addEventListener("change", aplicarFiltros);
</script>

<script type="module">
  document.addEventListener("DOMContentLoaded", () => {
    const modal = document.getElementById("modalMalEstado");
    const inputCantidad = document.getElementById("modalCantidad");
    const inputAlquilerId = document.getElementById("modalAlquilerId");
    const inputArticuloId = document.getElementById("modalArticuloId");
    const maxCantidadSpan = document.getElementById("maxCantidad");
    const errorCantidad = document.getElementById("cantidadError");

    document.querySelectorAll(".abrir-modal").forEach((btn) => {
      btn.addEventListener("click", () => {
        const alquilerId = btn.dataset.id;
        const articuloId = btn.dataset.articuloId;
        const max = btn.dataset.max;

        inputAlquilerId.value = alquilerId;
        inputArticuloId.value = articuloId;
        inputCantidad.value = "";
        inputCantidad.max = max;
        maxCantidadSpan.textContent = max;
        errorCantidad.classList.add("hidden");
        modal.classList.remove("hidden");
      });
    });

    document
      .getElementById("formReporte")
      .addEventListener("submit", async (e) => {
        e.preventDefault();

        const cantidadDanada = parseInt(
          document.getElementById("modalCantidad").value
        );
        const maxCantidad = parseInt(
          document.getElementById("maxCantidad").textContent
        );
        const alquilerId = document.getElementById("modalAlquilerId").value;
        const articuloId = document.getElementById("modalArticuloId").value;

        if (cantidadDanada > maxCantidad || cantidadDanada < 0) {
          document.getElementById("cantidadError").textContent =
            `La cantidad dañada no puede superar la cantidad alquilada (${maxCantidad}).`;
          document.getElementById("cantidadError").classList.remove("hidden");
          return;
        }

        const cantidadNoDanada = maxCantidad - cantidadDanada;

        const body = {
          alquilerId,
          articuloId,
          cantidadDanada,
          cantidadNoDanada,
        };

        try {
          const res = await fetch(
            "http://localhost:5183/api/AlquileresControllerDTO/reportar-danado",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(body),
            }
          );

          if (res.ok) {
            alert("Reporte enviado con éxito.");
            location.reload();
          } else {
            alert("Error al enviar el reporte.");
          }
        } catch (err) {
          console.error(err);
          alert("Error de conexión.");
        }
      });

    document.getElementById("btnCancelar").addEventListener("click", () => {
      modal.classList.add("hidden");
    });
  });
</script>
